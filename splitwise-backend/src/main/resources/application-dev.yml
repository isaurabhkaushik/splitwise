spring:
  application:
    name: admin-service

  datasource:
    #Use below one when using with docker-compose
    #url: jdbc:postgresql://postgres:5432/pahadi_auth
    url: jdbc:postgresql://localhost:5432/pahadi_auth
    username: pahadi
    password: pahadi_bhaiyon
    driver-class-name: org.postgresql.Driver
    initialization-mode: always #This ensures to call the schema.sql everytime the module runs
    #Need to have flyway or sth for production releases

  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB

server:
  port: 8004

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

security:
  basic:
    enable: false

  jwt:
    uri: /auth/**
    header: Authorization
    prefix: Bearer
    expiration: 432000
    secret: JwtSecretKey
    refreshExpiration : 864000

  otp:
    enabled: false
    key: ca86c15b-6b4f-11eb-8153-0200cd936042
    delay:
      start: 30
      increment: 10

  service:
    username: d245ef53-5ad5-4216-9c56-89fe0f8302a0
    password: ef919ae4-b893-4969-b782-57978180ad33

aws:
  s3:
    bucket-name: manga-lo
    folder-name: images
    access-key: AKIAXCZDUK43EPOQXTD3
    secret-access-key: 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

logging:
  level:
    root: debug
    sql: debug

es:
  url: localhost:9200
  search:
    limit: 5

discord:
  server-alerts-webhook: https://discord.com/api/webhooks/880773716437508136/uIfE24Dm_X0zHxbNmwMOa9NMAJnhF8-ukrnzvfSx5qXD3wgbkMe9-vUZRVncO1G9YgKV
  business-metrics-webhook: https://discord.com/api/webhooks/880775220431056956/BVXVRYHap1EYRbhhPbad7IRgmVIegBTRpM-6DlfOZB2ZrmBFtk__MDEu-XgnzDL8jVa7
